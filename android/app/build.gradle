plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}



android {

    // ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
    flavorDimensions += "flavor-type"

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationId "com.bosscar.hub.dev"
            resValue "string", "app_name", "DEV - CarHub"
        }
        prod {
            dimension "flavor-type"
            applicationId "com.bosscar.hub"
            resValue "string", "app_name", "CarHub"
        }
    }

    // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----

   namespace "com.bosscar.hub"
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.bosscar.hub"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            if (System.getenv()["CI"]) { // provided by Codemagic
                keyAlias System.getenv()["FCI_KEY_ALIAS"]
                storePassword System.getenv()["FCI_KEYSTORE_PASSWORD"]
                storeFile file(System.getenv()["FCI_KEYSTORE_PATH"])
                keyPassword System.getenv()["FCI_KEY_PASSWORD"]
            } else {
//                keyAlias keystoreProperties['keyAlias']
//                keyPassword keystoreProperties['keyPassword']
//                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
//                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }

//        debug {
//            // TODO: Add your own signing config for the release build.
//            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig signingConfigs.debug
//        }

    }

    configurations.all {
        resolutionStrategy {
            force 'com.google.errorprone:error_prone_annotations:2.20.0'
        }
    }
}

flutter {
    source '../..'
}
